Звіт до лабораторної роботи №2

Вступ до програмування. Основи debug процесу

Хід виконання роботи

1. Реєстрація на платформі GitHub та створення репозиторію

Зареєструвався на GitHub (або використав існуючий акаунт).

Створив приватний репозиторій з назвою programing-rudenok.

Додав викладача як співавтора, щоб забезпечити доступ до репозиторію.

2. Клонування репозиторію та копіювання файлів

Склонував репозиторій за допомогою команди:

git clone https://github.com/Andrew-Rude/programing-rudenok.git

Скопіював наступні файли з проекту sample_project:

.clang-format до кореня репозиторію.

.clang-tidy до кореня репозиторію.

.gitlab-ci.yml до кореня репозиторію.

Doxyfile до каталогу lab02.

Makefile до каталогу lab02.

README.md до каталогу lab02.

Каталоги src та test до каталогу lab02.

3. Фіксація початкових змін у репозиторії

Додав файли до індексу Git:

git add .

Зробив перший коміт із повідомленням:

git commit -m "Initial copy of sample_project"

4. Внесення змін до проекту та компіляція

Додав новий тип тварини "Людина" до файлу lib.c.

Оновив відповідні функції для роботи з новим типом.

Зібрав проект за допомогою команди:

make

Перевірив відсутність помилок компіляції та коректність виводу програми.

5. Використання відлагоджувача lldb

Скомпілював проект із додаванням налагоджувальної інформації:

clang -g -std=gnu11 -o dist/main.bin src/*.c

Запустив виконуваний файл у lldb:

lldb dist/main.bin

Встановив брейкпоінт на функцію main:

breakpoint set --name main

Виконав програму до зупинки на брейкпоінті:

run

Переглянув значення змінних за допомогою команди:

frame variable

Використав команди step in, step over, step out для покрокового виконання програми.

6. Опис режимів компіляції

Режим із налагоджувальною інформацією (-g): дозволяє використовувати відлагоджувач, аналізувати змінні та покроково виконувати код.

Режим без налагоджувальної інформації: створює оптимізований виконуваний файл, але без можливості використання відлагоджувача.

7. Фіксація змін у репозиторії

Після внесення змін у код, виконав:

git add .
git commit -m "Added support for HUMAN type and debugging info"

8. Завантаження змін у віддалений репозиторій

Завантажив зміни на сервер GitHub за допомогою команди:

git push origin main

9. Дослідження відмінностей у режимах компіляції

Режим із прапором -g додає інформацію про налагодження, що дозволяє використовувати відлагоджувач для аналізу коду.

Режим без -g створює оптимізований виконуваний файл, але налагодження стає неможливим.

Використання оптимізації (-O2, -O3) забезпечує швидкість виконання, але ускладнює відлагодження через зміну структури коду.

10. Підготовка та завантаження звіту

Написав текстовий звіт у файлі lab02.txt, який включає опис всіх виконаних етапів роботи.

Завантажив файл звіту до каталогу lab02/doc у репозиторії.

Зафіксував і завантажив звіт до GitHub:

git add lab02/doc/lab02.txt
git commit -m "Added lab02 report"
git push origin main

Висновки

У ході роботи було:

Налаштовано середовище для роботи з Git та GitHub.

Ознайомлено з основними командами системи контролю версій.

Використано lldb для відлагодження програми, що дозволило детально зрозуміти принципи роботи коду.

Досліджено відмінності між режимами компіляції з налагоджувальною інформацією та без неї.

