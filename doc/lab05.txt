Лабораторна робота №5. Розробка програм з використанням циклів
Руденок Андрій, гр. КН-924в

	Завдання:
 Загальне завдання: Реалізувати програму за допомогою трьох типів циклів: for, while-do, do-while (отримати три однакових результати).
 Індивідуальне завдання: У заданому цілому числі визначити кількість розрядів та суму його цифр. Наприклад, число 1488 має 4 розряди, сума його цифр – 21.
Структура проекту:
У рамках лабораторної роботи була створена наступна структура проекту:

lab05/
├── Makefile
├── README.md
├── doc/
│   └── lab05.txt
└── src/
    └── main.c
    
	Опис основної частини програми:
Програма реалізує функцію обчислення кількості розрядів та суми цифр заданого числа. Вона використовує три типи циклів для досягнення однакових результатів:

 Цикл for: Використовується для обчислення кількості розрядів та суми цифр, де ми змінюємо число в кожній ітерації і обробляємо цифри по черзі.

 Цикл while-do: Аналогічно до циклу for, але тут перевірка умови відбувається на початку кожної ітерації.

 Цикл do-while: У цьому циклі перевірка умови відбувається в кінці кожної ітерації, що гарантує хоча б одне виконання тіла циклу.

Ці цикли виконують однакові дії для підрахунку кількості розрядів та суми цифр заданого числа.

	Точка входу:
Точка входу програми знаходиться в основній функції main(). У ній визначається змінна number, що містить число, для якого будуть обчислені кількість розрядів та сума цифр. Точка входу є одна, оскільки програма виконується з початку до кінця, виконуючи усі дії по черзі.

Причина, чому точка входу повинна бути одна:

Програма має один початковий етап, і з нього відбувається виконання всіх етапів, зокрема ініціалізація змінних та запуск циклів.
Єдина точка входу дозволяє організувати чіткий та контрольований потік виконання програми.

	Опис виконання програми:
 Ініціалізація змінних: В програмі ініціалізуються змінні:

number — ціле число, для якого обчислюються кількість розрядів та сума цифр.
digit_count — змінна для підрахунку кількості цифр у числі.
digit_sum — змінна для обчислення суми цифр.
temp = number — Копія числа для обчислень, щоб не змінювати оригінальне число.

Чому був вибраний цикл while?

int temp = number;
while (temp != 0) {
    digit_sum += temp % 10;
    temp /= 10;
    digit_count++;
}

Вибір циклу while був зроблений через його простоту та наочність для даного завдання. Цикл while зручно використовується, коли ми не знаємо заздалегідь кількість ітерацій, але є чітка умова для зупинки. У нашому випадку, умова зупинки циклу — це коли число стане рівним нулю. Цей підхід є гнучким і дозволяє виконувати обчислення без зайвих умов в тілі циклу.

	Порівняння з іншими циклами:

Цикл for також може використовуватись, але він більше підходить для обчислень, де відома кількість ітерацій. Однак для цього завдання перевірка умови в циклі for виглядала б менш природно, ніж у циклі while, оскільки ми не знаємо точної кількості цифр у числі на початку.
Цикл do-while вимагає, щоб тіло циклу виконувалося хоча б один раз, навіть якщо умова з самого початку не виконується. Для нашого завдання це не дає суттєвої переваги, оскільки нам не потрібно виконувати обчислення для нульового числа.
Тому цикл while надає найбільшу ясність і простоту для даного випадку, де ми перевіряємо стан числа в кожній ітерації і коригуємо його.

	Виконання програми:
Програма компілюється за допомогою компілятора clang. Для цього в каталозі проекту створений Makefile, який автоматизує процес компіляції.

Makefile:
CC = clang
CFLAGS = -std=c11 -g -Wall
SRC = src/main.c
TARGET = main

# Ціль по замовчуванню
all: $(TARGET)

# Правило для створення виконуваного файлу
$(TARGET): $(SRC)
	$(CC) $(CFLAGS) $(SRC) -o $(TARGET)

# Ціль для очищення (видалення виконуваного файлу)
clean:
	rm -f $(TARGET)

	Використання відладчика:
Для налагодження програми був використаний відладчик lldb. На певних етапах виконання програми були встановлені точки зупинки (breakpoints), що дозволили зупинити виконання та перевірити значення змінних у процесі.

Після запуску програми і зміни значення змінної number, можна перевіряти значення змінних за допомогою команд:

print number — вивести значення числа.
print digit_sum — вивести суму цифр.
print digit_count — вивести кількість цифр.
Зміна значень змінних безпосередньо в процесі виконання програми здійснюється за допомогою команди:


expr number = 1488 — змінити значення числа на 1488.
Результати виконання програми:

(lldb) continue
Process 10929 resuming
Process 10929 stopped
* thread #1, name = 'main', stop reason = breakpoint 3.1
    frame #0: 0x0000555555555156 mainmain at main.c:50:17
   47  	    int temp = number;   // Копія числа для обчислень, щоб не змінювати оригінальне число
   48  	
   49  	    // Цикл для підрахунку розрядів і суми цифр
-> 50  	    while (temp != 0) {         // Цикл while продовжує працювати, поки temp не стане рівним нулю
   51  	        digit_sum += temp % 10; // Додаємо останню цифру до суми
   52  	        temp /= 10;             // Відкидаємо останню цифру
   53  	        digit_count++;          // Збільшуємо лічильник розрядів
(lldb) print number
(int) 1488
(lldb) print temp
(int) 1
(lldb) print digit_sum
(int) 20
(lldb) print digit_count
(int) 3
(lldb) continue
Process 10929 resuming
Process 10929 stopped
* thread #1, name = 'main', stop reason = breakpoint 3.1
    frame #0: 0x0000555555555156 mainmain at main.c:50:17
   47  	    int temp = number;   // Копія числа для обчислень, щоб не змінювати оригінальне число
   48  	
   49  	    // Цикл для підрахунку розрядів і суми цифр
-> 50  	    while (temp != 0) {         // Цикл while продовжує працювати, поки temp не стане рівним нулю
   51  	        digit_sum += temp % 10; // Додаємо останню цифру до суми
   52  	        temp /= 10;             // Відкидаємо останню цифру
   53  	        digit_count++;          // Збільшуємо лічильник розрядів
(lldb) print digit_sum
(int) 21
(lldb) print digit_count
(int) 4
(lldb) print number
(int) 1488
(lldb) print temp
(int) 0
(lldb) continue
Process 10929 resuming
Process 10929 exited with status = 0 (0x00000000) 


Програма коректно визначає кількість розрядів та суму цифр числа 1488. Після введення цього числа програма підраховує:

Кількість розрядів: 4
Сума цифр: 21

	Висновки:
 У процесі виконання лабораторної роботи були здобуті навички:

Реалізація трьох типів циклів (for, while, do-while).
Використання відладчика для перевірки правильності виконання програми та зміни стану програми на льоту.
Ця лабораторна робота дозволила закріпити основи розробки програм з використанням циклів та навичок налагодження програм.
